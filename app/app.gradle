import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.jvm.tasks.Jar
import org.jfrog.gradle.plugin.artifactory.dsl.PublisherConfig
import groovy.lang.GroovyObject

plugins {
    id 'java-library'
    id 'application'
    id 'maven-publish'
}

apply plugin: 'com.github.johnrengelman.shadow'

description = 'All of the application specific code that makes shuffleboard run.'

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)

wpilibTools.deps.wpilibVersion = "2023.+"

nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")

configurations.implementation.extendsFrom(configurations.javaFxDeps)

dependencies {
    javaFxDeps wpilibTools.deps.javafx("media")
    javaFxDeps wpilibTools.deps.javafx("swing")
    javaFxDeps wpilibTools.deps.javafx("web")

    implementation project(':api')
    implementation project(':plugins:base')
    implementation project(':plugins:cameraserver')
    implementation project(':plugins:networktables')

    api group: "de.huxhorn.lilith", name: "de.huxhorn.lilith.3rdparty.junique", version: "1.0.4"
    implementation group: "org.apache.commons", name: "commons-csv", version: "1.5"
    testImplementation project("test_plugins")
    testImplementation project(":api-test-util")
}

def theMainClassName = "edu.wpi.first.shuffleboard.app.Main"

application {
    mainClass = theMainClassName
    applicationDefaultJvmArgs = [
            "-Xverify:none",
            "-Dprism.order=d3d,es2,sw"
    ]
}

tasks.withType(Jar) {
    manifest {
        attributes["Main-Class"] = theMainClassName
    }
}

tasks.withType(Test) {
    dependsOn(project("test_plugins").tasks["jar"])
}

tasks.withType(ShadowJar).configureEach {
    archiveBaseName = "Shuffleboard"
    archiveVersion = ""
    exclude("module-info.class")
    archiveClassifier.set(wpilibTools.platformMapper.currentPlatform.platformName)

    if (wpilibTools.platformMapper.currentPlatform.platformName.startsWith("mac") &&
        project.hasProperty("developerID") && project.findProperty("developerID") != "") {
        doLast {
            exec {
                workingDir rootDir
                def args = ["sh", "codesign.sh", project.findProperty("developerID"),
                            archiveFile.get().getAsFile().getAbsolutePath()]
                commandLine args
                println "Location: " + archiveFile.get().getAsFile().getAbsolutePath()
            }
        }
    }
}

addTaskToCopyAllOutputs(shadowJar)

distTar {
    duplicatesStrategy = 'exclude'
}

distZip {
    duplicatesStrategy = 'exclude'
}

sourceSets["test"].resources.srcDirs.add(new File(project("test_plugins").buildDir, "libs"))
