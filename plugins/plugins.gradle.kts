import edu.wpi.first.wpilib.versioning.ReleaseType
import org.gradle.jvm.tasks.Jar
import java.util.Locale

subprojects {
    afterEvaluate {
        /** The plugin name as a proper noun */
        val proper = pluginName
        /** The name of the plugin. */
        val simpleName: String = proper.toLowerCase(locale = Locale.US)
        // Ensure that the WPILibVersioningPlugin is setup by setting the release type, if releaseType wasn't
        // already specified on the command line
        if (!hasProperty("releaseType")) {
            WPILibVersion {
                releaseType = ReleaseType.DEV
            }
        }
        plugins {
            id("edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin") version "2.0"
            `java-library`
        }
        dependencies {
            compileOnly(group = "com.google.code.findbugs", name = "annotations", version = "+")
            compile(project(":api"))
        }
        val sourceJar = task<Jar>("sourceJar") {
            description = "Creates a JAR that contains the source code."
            from(java.sourceSets["main"].allSource)
            classifier = "sources"
        }
        val javadocJar = task<Jar>("javadocJar") {
            dependsOn("javadoc")
            description = "Creates a JAR that contains the javadocs."
            from(java.docsDir)
            classifier = "javadoc"
        }
        publishing.publications {
            create<MavenPublication>("plugin.${project.name}") {
                groupId = "edu.wpi.first.shuffleboard.plugin"
                artifactId = project.name
                version = project.version.toString()
                from(components["java"])
                artifact(javadocJar)
                artifact(sourceJar)
            }
        }

        val versionClassFileName = "src/main/java/edu/wpi/first/shuffleboard/plugin/$simpleName/${proper}PluginVersion.java"
        val versionClassFile = file(versionClassFileName)
        val checkForVersionUpdate = task("checkPluginVersionUpdated") {
            description = "Check that the plugin's version number has been updated"
            doLast {
                val changedFiles = getChangedFiles(project)
                if (changedFiles.isNotEmpty()) {
                    val versionFileChanged = !fileExistsOnMaster("plugins/$simpleName/$versionClassFileName") || changedFiles.any { file ->
                        file.endsWith(versionClassFileName)
                    }
                    if (!versionFileChanged) {
                        throw VersionNotUpdatedException("Version file was not updated for plugin '$simpleName'")
                    }
                    val pluginFile = project.java.sourceSets["main"].allJava.toList()
                            .first { file -> file.nameWithoutExtension.equals("${proper}PluginVersion", true) }
                    val versionRegex = Regex("  public static final String VERSION = \"(.+)\";$")
                    val versionLine = pluginFile.readLines()
                            .first { line -> line.matches(versionRegex) }
                    val version = versionRegex.matchEntire(versionLine)!!.groupValues[1]
                    val masterVersion = getMasterVersion(rootProject, pluginFile)
                    if (masterVersion.contains("public static final String VERSION = \"$version\"")) {
                        throw VersionNotUpdatedException("Plugin version was not updated for plugin '$simpleName'")
                    }
                }
            }
        }

        tasks.getByName("check").dependsOn(checkForVersionUpdate)

        val generateVersionClass = task("generateVersionClass") {
            if (version == null || version == "" || version == "unspecified") {
                throw GradleException("No version specified for plugin '$simpleName' (given: $version)")
            }
            description = "Generates a source file containing the plugin version string"
            val versionClassContent = """
                package edu.wpi.first.shuffleboard.plugin.$simpleName;

                /**
                 * Autogenerated version class containing the version of the $proper plugin.
                 *
                 * <p><strong>DO NOT MODIFY THIS CLASS</strong>
                 */
                public final class ${proper}PluginVersion {

                  /**
                   * The version of the $proper plugin.
                   */
                  public static final String VERSION = "$version";

                  private ${proper}PluginVersion() {
                    throw new UnsupportedOperationException();
                  }
                }
                """.trimIndent()
            doLast {
                if (versionClassFile.exists()) {
                    versionClassFile.delete()
                }
                versionClassFile.createNewFile()
                versionClassFile.writeText(versionClassContent)
            }
        }
        tasks.getByName("compileJava").dependsOn(generateVersionClass)
    }
}

/**
 * Gets a list of the names of the files in the project that have changed on the current branch, including uncommitted
 * and unstaged files, relative to the `master` branch.
 *
 * @param project the project to get the changed files for
 */
fun getChangedFiles(project: Project): List<String> {
    val getDiff: Process = Runtime.getRuntime().exec("git diff master --name-only")
    val input = getDiff.inputStream.bufferedReader().use { it.readText() }
    return input.split('\n')
            .filter { path -> path.startsWith("plugins/${project.name}") }
            .toList()
}

/**
 * Gets the version of a file on the `master` branch.
 */
fun getMasterVersion(rootProject: Project, file: File): String {
    val cmd = "git show master:${file.relativeTo(rootProject.projectDir)}"
    val getMasterVersion: Process = Runtime.getRuntime().exec(cmd)
    return getMasterVersion.inputStream.bufferedReader().use { it.readText() }
}

class VersionNotUpdatedException(message: String) : GradleException(message)

/**
 * @return [edu.wpi.first.wpilib.versioning.WPILibVersioningPluginExtension.version] value or null
 * if that value is the empty string.
 */
fun getWPILibVersion(): String? = if (WPILibVersion.version != "") WPILibVersion.version else null

/**
 * Checks if a file exists on the master branch.
 *
 * @param file the file path relative to the git root directory
 */
fun fileExistsOnMaster(file: String): Boolean {
    val cmd = "git cat-file -e master:$file"
    val proc: Process = Runtime.getRuntime().exec(cmd)
    return proc.waitFor() == 0
}

val Project.pluginName: String
    get() = extra["pluginName"] as String
