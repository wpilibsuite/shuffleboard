import groovy.xml.XmlUtil

buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'checkstyle'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
    id 'maven-publish'
}
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'org.fxmisc.easybind', name: 'easybind', version: '1.0.3'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.11'
    compile "edu.wpi.first.wpilib.networktables.java:NetworkTables:+:desktop"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'

    testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'
    testCompile "junit:junit:+"
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
    testRuntime group: 'org.testfx', name: 'openjfx-monocle', version: '8u76-b04'
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = '6.19'
}

pmd {
    consoleOutput = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files(new File(rootDir, "pmd-ruleset.xml"))
    ruleSets = []
}

findbugs {
    sourceSets = [sourceSets.main, sourceSets.test]
    excludeFilter = new File(rootDir, "findBugsSuppressions.xml")
    effort = "max"
}

ext.printReportSafe = { xmlReport ->
    if (xmlReport.exists()) {
        def bugs = (new XmlParser().parse(xmlReport)).BugInstance
        bugs.each { System.out.println(new XmlUtil().serialize(it)) }
    }
}

task findbugsMainReport {
    doLast {
        printReportSafe(findbugsMain.reports.getXml().destination)
    }
}

task findbugsTestReport {
    doLast {
        printReportSafe(findbugsTest.reports.getXml().destination)
    }
}

findbugsMain.finalizedBy findbugsMainReport
findbugsTest.finalizedBy findbugsTestReport

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    testLogging {
        if (project.hasProperty('logTests') || project.hasProperty('jenkinsBuild')) {
            events "started", "passed", "skipped", "failed"
        } else {
            events "failed"
        }
        exceptionFormat "full"
    }
}

/*
 * Allows you to run the UI tests in headless mode by calling gradle with the -Pheadless argument
 */
if (project.hasProperty('jenkinsBuild') || project.hasProperty('headless')) {
    println "Running UI Tests Headless"
    test {
        jvmArgs = ['-Djava.awt.headless=true', '-Dtestfx.robot=glass', '-Dtestfx.headless=true', '-Dprism.order=sw', '-Dprism.text=t2k']
        useJUnit {
            excludeCategories 'edu.wpi.first.shuffleboard.NonHeadlessTests'
        }
    }
}

mainClassName = 'edu.wpi.first.shuffleboard.Shuffleboard'

shadowJar {
    classifier = null
    if (WPILibVersion.version != '') {
        version = WPILibVersion.version
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)

            groupId 'edu.wpi.first.shuffleboard'
            artifactId 'Shuffleboard'
            if (WPILibVersion.version != '') {
                version WPILibVersion.version
            }
        }
    }
}

// Ensure that the WPILibVersioningPlugin is setup by setting the release type, if releaseType wasn't
// already specified on the command line
if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}
